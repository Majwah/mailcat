#!/usr/bin/env perl
use v5.14;
use strict;

# Core modules
use Getopt::Std qw(getopts);

# Non-core modules
use Email::Stuffer;
use Email::Sender::Transport::SMTP;
use TOML;
use IO::All;

unshift @ARGV, split(" ", $ENV{MAILCAT_OPT}) if $ENV{MAILCAT_OPT};

my %opts;

$opts{h} = 1 if !@ARGV;

getopts("nhc:", \%opts);

if ($opts{h}) {
    require IO::Pager;
    require Pod::Usage;
    my $token = IO::Pager->new(*STDOUT);

    Pod::Usage::pod2usage( -verbose => 2, -noperldoc => 1, -output => \*STDOUT );
}

die "-c requise a valid TOML file\n" unless -f "$opts{c}";

my ($config, $error) = from_toml( io($opts{c})->utf8->all );

if ($error) {
    die "Error parsing TOML: $error\n";
}

unless ($config->{header}{from} && $config->{header}{to} && $config->{header}{subject}) {
    die "Missing values in config. header.{from,to,subject} are all required.\n";
}

my @parts;
my $body = "";

my $body_from_pipe;

if (-p STDIN) {
    $body = io('-')->utf8->all;
    $body_from_pipe = 1;
}

if (@ARGV) {
    for my $file (@ARGV) {
        if (-f $file) {
            if (-T $file) {
                $body .= io($file)->utf8->all;
            }
            else {
                push @parts, { file => $file };
            }
        }
        elsif ($file eq "-" && !$body_from_pipe) {
            $body .= io("-")->utf8->all;
        }
    }
}

if (!$body && (!@ARGV || -p STDIN)) {
    $body = io('-')->utf8->all;
}

if ($body) {
    unshift @parts, { text => $body }
}

die "Nothing to send?" unless @parts;

my $email = Email::Stuffer->new;

if (exists $config->{smtp}) {
    $email->transport("SMTP", $config->{smtp});
}

$email->subject( $config->{header}{subject} );
$email->from( $config->{header}{from} );
$email->to( $config->{header}{to} );

for (@parts) {
    if ($_->{text}) {
        $email->text_body($_->{text});
    }
    else {
        $email->attach_file($_->{file});
    }
}

if ($opts{n}) {
    say $email->as_string;
}
else {
    $email->send();
}

__END__


=head1 NAME

mailcat -- mail delivery program that acts like cat.

=head1 USAGE

    mailcat -c config.toml [-hn] [...]

      -h Display this help message
      -c config.toml
      -n print, instead of sending the mail.

=head1 Examples

Mail text files with attachments:

    mailcat -c config.toml mail_body.txt
    mailcat -c config.toml mail_body.txt mail_attachment_*.jpg

Mail text from stdin pipe:

    some_program_output | mailcat -c config.toml

Mail text from interactive stdin:

    mailcat -c config.toml
    SOME THING TO SAY
    ...
    ^D

Mail the concatenated text from STDIN and a text file:

    mailcat -c config.toml - other_text.txt

=head1 Description

mailcat acts like cat, but delivers to a mail destination instead of STDOUT.

It requires a C<-c> argument pointing to a TOML format config file with these
key/values settings.

    [header]
    to = "smith@example.com"
    from = "alice@example.com"
    subject = "Blah blah blah, hoge hoge hoge."

    [smtp]
    host = "smtp.example.com"
    ssl = 1
    sasl_username = "alice"
    sasl_password = "alices3cretpassw0rdz"

The C<header> section is required, but the C<smtp> section is optional.
By default the program uses C<sendmail>.

The stuff to be mailed at are passed with command arguments, or via STDIN.
STDIN are assumed to be UTF-8 encoded texts. Binary files like images must
be passed by arguments.

mailcat takes STDIN interactively only when no arguments is passed, or when
C<-> is used in one of the arrugments. Just like C<cat>.

An special environment variable C<MAILCAT_OPT> can be defined to accomodate
the need for repeatitive input of "-c config.toml" argument:

    export MAILCAT_OPT="-c /etc/mailcat.toml"

The content of C<MAILCAT_OPT> variable is prepend to the argument list in the
beginning of the program.

=head1 Dependencies

IO::All Email::Stuffer MIME::Base64 Authen::SASL Net::SMTP

=head1 SEE ALSO

The perl module L<Email::Stuffer>, where everything happens. This program is
merely a small wrapper around that module.

Perl module L<TOML> and L<https://github.com/mojombo/toml> for the description of TOML language.

=head1 AUTHORS

Kang-min Liu C<gugod@gugod.org>

=head1 CC0 1.0 Universal

To the extent possible under law, Kang-min Liu has waived all copyright and
related or neighboring rights to L<mailcat>.

This work is published from: Netherlands.

L<http://creativecommons.org/publicdomain/zero/1.0>
