#!/usr/bin/env perl
use v5.14;
use strict;

use Email::Stuffer;
use Email::Sender::Transport::SMTP;
use TOML;
use Getopt::Std qw(getopts);
use IO::All;

my %opts;
getopts("c:", \%opts);
die "-c requise a valid TOML file\n" unless -f "$opts{c}";

my ($config, $error) = from_toml( io($opts{c})->utf8->all );

if ($error) {
    die "Error parsing TOML: $error\n";
}

unless ($config->{header}{from} && $config->{header}{to} && $config->{header}{subject}) {
    die "Missing values in config. header.{from,to,subject} are all required.\n";
}

my @parts;
my $body = "";
if (@ARGV) {
    for my $file (@ARGV) {
        if (-f $file) {
            if (-T $file) {
                $body .= io($file)->utf8->all;
            }
            else {
                push @parts, { file => $file };
            }
        }
    }
}

if (!$body && -p STDIN) {
    $body .= io('-')->utf8->all;
}

if ($body) {
    unshift @parts, { text => $body }
}

die "Nothing to send?" unless @parts;

my $email = Email::Stuffer->new;

if (exists $config->{smtp}) {
    $email->transport("SMTP", $config->{smtp});
}

$email->subject( $config->{header}{subject} );
$email->from( $config->{header}{from} );
$email->to( $config->{header}{to} );

for (@parts) {
    if ($_->{text}) {
        $email->text_body($_->{text});
    }
    else {
        $email->attach_file($_->{file});
    }
}

$email->send();

__END__

=head1 Usage

    mailcat -c mail_config.toml mail_body.txt

    mailcat -c mail_config.toml mail_body.txt mail_attachment_*.jpg

    some_program_output | mailcat -c mail_config.toml

=head1 Description

mailcat acts like cat, but delivers to a mail destination instead of STDOUT.

It requires a C<-c> argument pointing to a TOML format config file with these
key/values settings.

    [header]
    to = "smith@example.com"
    from = "alice@example.com"
    subject = "Blah blah blah, hoge hoge hoge."

    [smtp]
    host = "smtp.example.com"
    ssl = 1
    sasl_username = "alice"
    sasl_password = "alices3cretpassw0rdz"

The stuff to be mailed at are passed with command arguments, or via STDIN.
STDIN are assumed to be UTF-8 encoded texts. Binary files like images should
be passed by arguments.

